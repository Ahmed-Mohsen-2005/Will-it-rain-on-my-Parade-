// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  profile         UserProfile?
  locations       UserLocation[]
  alerts          WeatherAlert[]
  searchHistory   SearchHistory[]
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Preferences
  preferredUnits  String   @default("metric") // metric or imperial
  theme           String   @default("auto")   // auto, light, dark
  language        String   @default("en")
  timezone        String   @default("UTC")
  
  // Notification settings
  emailNotifications Boolean @default(true)
  pushNotifications   Boolean @default(false)
  alertThreshold     Int     @default(50) // precipitation percentage threshold
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserLocation {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Location details
  name            String
  address         String?
  latitude        Float
  longitude       Float
  city            String?
  state           String?
  country         String?
  countryCode     String?
  
  // Preferences
  isDefault       Boolean  @default(false)
  nickname         String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model WeatherAlert {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  locationId      String?
  
  // Alert details
  title           String
  description     String
  alertType       String   // weather_risk, severe_weather, precipitation, etc.
  severity        String   // low, medium, high, extreme
  
  // Conditions
  minPrecipitation Int?
  maxPrecipitation Int?
  minTemperature  Int?
  maxTemperature  Int?
  maxWindSpeed    Int?
  weatherConditions String? // JSON array of condition types
  
  // Timing
  eventDate       DateTime?
  isActive        Boolean  @default(true)
  isTriggered     Boolean  @default(false)
  triggeredAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SearchHistory {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Search details
  query           String
  latitude        Float?
  longitude       Float?
  locationName    String?
  eventType       String?
  
  // Results
  weatherData     String?  // JSON string of weather data
  
  createdAt       DateTime @default(now())
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}